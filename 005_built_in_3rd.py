print('\n\n')
print('===================================================================')
print('|  Built-in Function #3                                           |')
print('|  1.1. iterable functions - list, Join & tuple                   |')
print('|    1) list    : Built-in mutable sequence.                      |')
print('|    2) tuple : Built-in immutable sequence.                      |')
print('|    3) join    : Concatenate any number of strings.              |')
print('|  2.set, intersection, union, difference & enumerate             |')
print('|    1) set  : Build an unordered collection of unique elements.  |')
print('|    2) intersection                                              |')
print('|    3) union                                                     |')
print('|    4) difference                                                |')
print('|    5) enumerate                                                 |')
print('|  3.File Stream                                                  |')
print('|  4.all & any                                                    |')
print('|  5.iter, next & zip                                             |')
print('|    1) bytes                                                     |')
print('|    2) bytearray                                                 |')
print('|  6.filter, map & reduce                                         |')
print("===================================================================\n\n")

import math


print('1. iterable functions - list, Join & tuple')
iNum = '12345678'
cStr = '김동훈천재'
iLst = list(iNum)
cLst = list(cStr)
iJoin = '.'.join(iLst)
cJoin = '-'.join(cLst)
iTuple = tuple(iLst)
cTuple = tuple(cLst)
print('   iNmu is "%s"' % iNum, ' and the type of iNum is', type(iNum))
print('   cStr is "%s"' % cStr, ' and the type of cStr is', type(cStr))

print('   iLst is the result of "list(iNum)". ->', iLst, ' and the type of iLst is', type(iLst))
print('   cLst is the result of "list(cStr)". ->', cLst, ' and the type of cLst is', type(cLst))

print('   iJoin is the result of "join(iLst)". ->', iJoin, ' and the type of iJoin is', type(iJoin))
print('   cJoin is the result of "join(cLst)". ->', cJoin, ' and the type of cJoin is', type(cJoin))

print('   iTuple is the result of "tuple(iLst)". ->', iTuple, ' and the type of iJoin is', type(iTuple))
print('   cTuple is the result of "tuple(cLst)". ->', cTuple, ' and the type of cJoin is', type(cTuple))
print("\n")

print('2. set, intersection, union, difference & enumerate')
print('   The result of set("tweedy") is', set('tweedy'))
s1 = set([1,2,3,4,5,6])
s2 = set([4,5,6,7,8,9])
print('   s1 is', s1)
print('   s2 is', s2)
print('   The result of s1 & s2 is', s1 & s2)
print('   The result of "s1.intersection(s2)" is', s1.intersection(s2))
print('   The result of s1 | s2 is', s1 | s2)
print('   The result of "s1.union(s2)" is', s1.union(s2))
print('   The result of s1 - s2 is', s1 - s2)
print('   The result of "s1.difference(s2)" is', s1.difference(s2))
print('   Test of enumerate is like following.')
for i,j in enumerate(s1):
    print('   The elements of "s1": index-{} value-{}'.format(i,j))
print("\n")

print('3. File stream')
print('   <stream name> = open(<file path>,<mode>)')
print('   close(<stream name>)')
print('   with open(<file path>, <mdoe>) as <stream name>:')
print('   mode: w, a, r')
print('   file.write("")')
print('   for line in file:')
print('     print(line)')
print("\n")

print('4. all & any')
print('   The result of all([1,2,3,0]) is', all([1,2,3,0]))
print('   The result of any([1,2,3,0]) is', any([1,2,3,0]))
print("\n")

#iter(), next() => iter는 data Return 후 delete한다.
print('5. iter, next & zip')
a = list(range(1,9))
b = list(range(8,17))
c = list(range(1,7))
print('   a is', a)
print('   b is', b)
print('   c is', c)
ai = iter(a)
print('   ai is iter(a)')
print('   The result of "next(ai, None)" is', next(ai, None))
print('   The result of "next(ai, None)" is', next(ai, None))
print('   The result of "next(ai, None)" is', next(ai, None))
print('   The result of "next(ai, None)" is', next(ai, None))
print('   The result of "next(ai, None)" is', next(ai, None))
print('   The result of "list(ai)" is', list(ai))
print('   The result of "zip(a,b)" is', list(zip(a,b)))
print('   The result of "zip(a,c)" is', list(zip(a,c)))
print("\n")

print('6. filter, map & reduce')
fn = list(range(-5,6))
print('   fn is', fn)
print('   filter for negative values of fn is',list(filter(lambda x: x<0, fn)))
print('   filter for positive values of fn is',list(filter(lambda x: x>=0, fn)))
print('   map for [fn x 3] values of fn', list(map(lambda x: x*3, fn)))
print('   map for positive values of fn is', list(map(lambda x: x>=0, fn)))

from functools import reduce
fn = list(range(1,10))
print('   fn is', fn)
print('   reduce for plus of fn is',reduce(lambda x, y: x + y, fn))
print('   reduce for multiple of fn is',reduce(lambda x, y: x * y, fn))
